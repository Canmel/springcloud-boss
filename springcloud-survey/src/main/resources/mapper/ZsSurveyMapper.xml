<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.camel.survey.mapper.ZsSurveyMapper">

    <!-- 通用查询映射结果 -->
    <resultMap id="BaseResultMap" type="com.camel.survey.model.ZsSurvey">
        <id column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="project_id" property="projectId"/>
        <result column="collect_num" property="collectNum"/>
        <result column="current_num" property="currentNum"/>
        <result column="status" property="status" jdbcType="INTEGER"
                typeHandler="com.camel.survey.enumhandler.MyIntegerToEnumHandler"/>
        <result column="created_at" property="createdAt"/>
        <result column="start_show" property="startShow"/>
        <result column="end_show" property="endShow"/>
        <result column="collect_type" property="collectType" jdbcType="INTEGER"
                typeHandler="com.camel.survey.enumhandler.MyIntegerToEnumHandler"/>
        <result column="creator" property="creatorId"/>
        <result column="collect_phone" property="collectPhone"/>
        <result column="monit" property="monit"/>
        <result column="unclear_count" property="unclearCount"/>
        <result column="information_template" property="informationTemplate"/>
        <result column="state" property="state" typeHandler="com.camel.survey.enumhandler.MyIntegerToEnumHandler"/>
        <result column="auto_call" property="autoCall" typeHandler="com.camel.survey.enumhandler.MyIntegerToEnumHandler" />
        <result column="final_cus_id" property="finalCusId"/>
        <association property="project" column="project_id"
                     select="com.camel.survey.mapper.ZsProjectMapper.selectProjectById"></association>
        <association property="creator" javaType="com.camel.core.model.SysUser">
            <id property="uid" column="creator" jdbcType="INTEGER"></id>
        </association>
        <collection property="examList" column="id"
                    select="com.camel.survey.mapper.ZsExamMapper.listBySurveyId"></collection>
    </resultMap>

    <resultMap id="SimpleResultMap" type="com.camel.survey.model.ZsSurvey">
        <id column="id" property="id"/>
        <result column="name" property="name"/>
        <result column="project_id" property="projectId"/>
        <result column="collect_num" property="collectNum"/>
        <result column="current_num" property="currentNum"/>
        <result column="start_show" property="startShow"/>
        <result column="end_show" property="endShow"/>
        <result column="status" property="status" jdbcType="INTEGER"
                typeHandler="com.camel.survey.enumhandler.MyIntegerToEnumHandler"/>
        <result column="created_at" property="createdAt"/>
        <result column="collect_type" property="collectType" jdbcType="INTEGER"
                typeHandler="com.camel.survey.enumhandler.MyIntegerToEnumHandler"/>
        <result column="creator" property="creatorId"/>
        <result column="collect_phone" property="collectPhone"/>
        <result column="monit" property="monit"/>
        <result column="unclear_count" property="unclearCount"/>
        <result column="information_template" property="informationTemplate"/>
        <result column="state" property="state" typeHandler="com.camel.survey.enumhandler.MyIntegerToEnumHandler"/>
        <result column="pstn_number" property="pstnNumber"/>
        <result column="final_cus_id" property="finalCusId"/>
    </resultMap>

    <!-- 通用查询结果列 -->
    <sql id="Base_Column_List">
        zs_survey.id, zs_survey.name, start_show, end_show, collect_phone, monit, zs_survey.project_id, zs_survey.state, zs_survey.collect_num, zs_survey.current_num, zs_survey.status, zs_survey.created_at, zs_survey.creator, zs_survey.collect_type, zs_survey.unclear_count, zs_survey.information_template, zs_survey.pstn_number, zs_survey.auto_call,zs_survey.final_cus_id
    </sql>

    <select id="list" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"></include>
        from
        zs_survey zs_survey
        <where>
            status = 1
            <if test="name != null and name != ''">
                AND zs_survey.name like concat('%', #{name}, '%')
            </if>
            <if test="state != null">
                AND zs_survey.state = #{state.value}
            </if>
            <if test="collectType != null">
                AND zs_survey.collect_type = #{collectType.value}
            </if>
            <if test="projectId != null">
                AND zs_survey.project_id = #{projectId}
            </if>
            <if test="companyId != null">
                AND zs_survey.company_id = #{companyId}
            </if>
        </where>
        order by id desc
    </select>

    <select id="all" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"></include>
        from
        zs_survey zs_survey
    </select>

    <select id="find" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"></include>
        FROM
        zs_survey
        <where>
            id = #{id}
        </where>
    </select>

    <select id="findById" resultMap="SimpleResultMap">
        select
        <include refid="Base_Column_List"></include>
        FROM
        zs_survey
        <where>
            id = #{id}
        </where>
    </select>

    <update id="updateCurrent">
        update zs_survey set current_num = current_num + 1 where id = #{id}
    </update>

    <select id="findLatestSurvey" resultMap="SimpleResultMap">
        select
        <include refid="Base_Column_List"></include>
        FROM
        zs_survey order by id desc limit 1
    </select>

    <select id="avgTime" resultType="integer">
        SELECT
            AVG(IFNULL(call_lasts_time, 0))
        FROM
            zs_answer
        WHERE
            survey_id = #{id}
        AND agent_UUID != '0'
    </select>

    <select id="checkAnswers"  resultType="com.camel.survey.model.ZsWork">
        select
            a.survey_id AS project_id,
            cast(a.created_at AS date) AS work_date,
            a.uid AS uid,
            a.seat AS job_number,
            count(*) AS success_num,
            u.username AS uname,
            u.mobile AS phone,
            u.id_num AS id_num,
            s.name AS pname
        from
            sys_user AS u
        LEFT JOIN zs_answer AS a ON a.uid = u.uid
        LEFT JOIN zs_survey AS s ON a.survey_id = s.id
        where
            a. STATUS = 1
            AND a.checked = 0
            and a.survey_id = #{surveyId}
        GROUP BY
            work_date,
            uid,
            seat
    </select>

    <select id="selectTotal" resultType="hashmap">
        select
            COUNT(1) try_num,
            IFNULL(SUM(case valid WHEN 1 THEN 1 else 0 END), 0) AS success_num,
            IFNULL(SUM(case when in_valid_msg is not null and valid = 0 then 1  else 0 end),0) AS invalid_num,
            IFNULL(SUM(call_lasts_time), 0) AS call_lasts_time
        from zs_answer where survey_id = #{surveyId} and uid = #{id};
    </select>
</mapper>
