<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.camel.survey.mapper.ZsAnswerMapper">

    <!-- 通用查询映射结果 -->
    <resultMap id="BaseResultMap" type="com.camel.survey.model.ZsAnswer">
        <id column="id" property="id"/>
        <result column="survey_id" property="surveyId"/>
        <result column="agent_UUID" property="agentUUID"/>
        <result column="record" property="record"/>
        <result column="seat" property="seat"/>
        <result column="status" property="status" typeHandler="com.camel.survey.enumhandler.MyIntegerToEnumHandler"/>
        <result column="created_at" property="createdAt"/>
        <result column="creator" property="creator"/>
        <result column="task_id" property="taskId"/>
        <result column="task_status" property="taskStatus"
                typeHandler="com.camel.survey.enumhandler.MyIntegerToEnumHandler"/>
    </resultMap>

    <resultMap id="BaseFullResultMap" type="com.camel.survey.model.ZsAnswer">
        <id column="id" property="id"/>
        <result column="survey_id" property="surveyId"/>
        <result column="agent_UUID" property="agentUUID"/>
        <result column="record" property="record"/>
        <result column="seat" property="seat"/>
        <result column="status" property="status" typeHandler="com.camel.survey.enumhandler.MyIntegerToEnumHandler"/>
        <result column="created_at" property="createdAt"/>
        <result column="creator" property="creator"/>
        <result column="valid" property="valid" typeHandler="com.camel.survey.enumhandler.MyIntegerToEnumHandler"/>
        <collection property="items" column="id" select="com.camel.survey.mapper.ZsAnswerItemMapper.selectByAnswerId">
        </collection>
    </resultMap>

    <!-- 通用查询结果列 -->
    <sql id="Base_Column_List">
        id, survey_id, agent_UUID, status, record, seat, created_at, creator, valid, task_id, task_status
    </sql>

    <select id="list" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"></include>
        from
        zs_answer
        <where>
            status = 1
            <if test="surveyId != null">
                and survey_id = #{surveyId}
            </if>
            <if test="validValue != null">
                and valid = #{validValue}
            </if>
        </where>
    </select>

    <select id="selectRateBySurveyQuestion" resultType="hashmap">
        select result.option, result.num, result.count, concat((result.num/result.count) * 100, '%') rate
        from (
          select ai.option, count(1) num ,
            (select count(1) from zs_answer_item ai left join zs_answer a on a.id = ai.answer_id where ai.question = #{question} and a.survey_id = #{id}) count
            from zs_answer_item ai left join zs_answer a on a.id = ai.answer_id where ai.question = #{question} and a.survey_id = #{id}
            GROUP BY ai.option
        ) result
    </select>

    <select id="selectCountCross" resultType="hashmap">
        select count(1) count from zs_answer_item ai left join zs_answer a on a.id = ai.answer_id where a.survey_id = 1 and  question = #{question} and `option` = #{option} and ai.creator in (
          select ai.creator from zs_answer_item ai left join zs_answer a on a.id = ai.answer_id where a.survey_id = #{surveyId} and ai.question = #{mainQuestion} and ai.`option` = #{mianOption}
        )
    </select>

    <select id="selectBySurvey" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"></include>
        from
        zs_answer
        <where>
            status = 1
            and survey_id = #{surveyId}
        </where>
    </select>

    <select id="details" resultMap="BaseFullResultMap">
        select
        <include refid="Base_Column_List"></include>
        from
        zs_answer
        <where>
            status = 1
            and id = #{id}
        </where>
    </select>

    <select id="selectDetailsBySurveyId" resultMap="BaseFullResultMap">
        select
        <include refid="Base_Column_List"></include>
        from zs_answer
        where
        survey_id = #{id}
        limit #{rowNum}, 200
    </select>

    <select id="selectAllWithConversation" resultMap="BaseResultMap">
        SELECT
            answer.id, answer.survey_id, answer.agent_UUID, answer.status, answer.seat, answer.created_at, answer.creator, answer.valid,
            cdrinfo.record_file as record
        FROM
        zs_answer answer
        LEFT JOIN zs_cdrinfo cdrinfo ON FIND_IN_SET(answer.agent_UUID, cdrinfo.uuids) > 0
        WHERE
        answer.survey_id = #{id}
        AND answer.agent_UUID != '';
    </select>
</mapper>
